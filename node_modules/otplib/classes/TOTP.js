'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _totpCheck = require('../core/totpCheck');

var _totpCheck2 = _interopRequireDefault(_totpCheck);

var _totpToken = require('../core/totpToken');

var _totpToken2 = _interopRequireDefault(_totpToken);

var _HOTP2 = require('./HOTP');

var _HOTP3 = _interopRequireDefault(_HOTP2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Time-based One-time Password Algorithm
 *
 * ## References
 *
 * -   http://tools.ietf.org/html/rfc6238
 * -   http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm
 *
 * ## Algorithm
 *
 * ```
 * T0 be an epoch
 * TS be the time stemp
 * TC be the current timestamp turned into an int, using defined T0, counting in TS units
 * TC = (unixtime(now) - unixtime(T0)) / TS
 * TOTP = HOTP(secretsecret, TC), where the HOTP algorithm is defined below.
 * TOTP-Value = TOTP mod 10d, where d is the desired number of digits of the one-time password.
 * ```
 *
 * @class TOTP
 * @extends {HOTP}
 * @since 3.0.0
 * @author Gerald Yeo
 * @license MIT
 */
var TOTP = function (_HOTP) {
  _inherits(TOTP, _HOTP);

  function TOTP() {
    _classCallCheck(this, TOTP);

    var _this = _possibleConstructorReturn(this, (TOTP.__proto__ || Object.getPrototypeOf(TOTP)).call(this));

    _this.options = {
      epoch: null,
      step: 30
    };
    return _this;
  }

  /**
   * Generates token.
   * Passes instance options to underlying core function
   *
   * @param {string} secret
   * @return {string}
   * @see {@link module:core/totpToken}
   */


  _createClass(TOTP, [{
    key: 'generate',
    value: function generate(secret) {
      return (0, _totpToken2.default)(secret, this.options);
    }

    /**
     * Checks validity of token.
     * Passes instance options to underlying core function
     *
     * @param {string} token
     * @param {string} secret
     * @return {boolean}
     * @see {@link module:core/totpCheck}
     */

  }, {
    key: 'check',
    value: function check(token, secret) {
      return (0, _totpCheck2.default)(token, secret, this.options);
    }

    /**
     * Alias method for `check` that accepts an object as argument instead
     *
     * @param {string} options.token
     * @param {string} options.secret
     * @return {boolean}
     */

  }, {
    key: 'verify',
    value: function verify(opts) {
      if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object' || opts == null) {
        return false;
      }
      return this.check(opts.token, opts.secret);
    }
  }]);

  return TOTP;
}(_HOTP3.default);

exports.default = TOTP;