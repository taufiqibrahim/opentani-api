'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _hotpCheck = require('../core/hotpCheck');

var _hotpCheck2 = _interopRequireDefault(_hotpCheck);

var _hotpToken = require('../core/hotpToken');

var _hotpToken2 = _interopRequireDefault(_hotpToken);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * HMAC-based One-time Password Algorithm
 *
 * ## References
 *
 * -   http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm
 * -   http://tools.ietf.org/html/rfc4226
 *
 * ## Algorithm
 *
 * ```
 * K be a secret secret
 * C be a counter
 * HMAC(K,C) = SHA1(K & 0x5c5c... | SHA1(K & 0x3636... | C))
 * be an HMAC calculated with the SHA-1 cryptographic hash algorithm
 * Truncate be a function that selects 4 bytes from the result of the
 * HMAC in a defined manner
 * HOTP(K,C) = Truncate(HMAC(K,C)) & 0x7FFFFFFF
 * HOTP-Value = HOTP(K,C) mod 10d, where d is the desired number of digits
 * ```
 *
 * @class HOTP
 * @since 3.0.0
 * @author Gerald Yeo
 * @license MIT
 */
var HOTP = function () {
  function HOTP() {
    _classCallCheck(this, HOTP);

    this._options = {};
  }

  /**
   * Getter and Setter methods for instance options
   * that will be used to override the defaults.
   *
   * ```
   * // Setter
   * const hotp = new HOTP();
   * hotp.options = {
   *   digits: 8
   * }
   * ```
   *
   * ```
   * // Getter
   * const hotp = new HOTP();
   * const opt = hotp.options;
   * ```
   *
   * @type {object}
   */


  _createClass(HOTP, [{
    key: 'generate',


    /**
     * Generates token.
     * Passes instance options to underlying core function
     *
     * @param {string} secret
     * @param {number} counter
     * @return {string}
     * @see {@link module:core/hotpToken} for more information.
     */
    value: function generate(secret, counter) {
      return (0, _hotpToken2.default)(secret, counter, this.options);
    }

    /**
     * Checks validity of token.
     * Passes instance options to underlying core function
     *
     * @param {string} token
     * @param {string} secret
     * @param {number} counter
     * @return {boolean}
     * @see {@link module:core/hotpCheck} for more information.
     */

  }, {
    key: 'check',
    value: function check(token, secret, counter) {
      return (0, _hotpCheck2.default)(token, secret, counter, this.options);
    }

    /**
     * Alias method for `check` that accepts an object as argument instead
     *
     * @param {string} options.token
     * @param {string} options.secret
     * @param {number} options.counter
     * @return {boolean}
     */

  }, {
    key: 'verify',
    value: function verify(opts) {
      if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object' || opts == null) {
        return false;
      }
      return this.check(opts.token, opts.secret, opts.counter);
    }
  }, {
    key: 'options',
    set: function set() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (opt) {
        this._options = _extends({}, this._options, opt);
      }
    },
    get: function get() {
      return _extends({}, this._options);
    }
  }]);

  return HOTP;
}();

exports.default = HOTP;