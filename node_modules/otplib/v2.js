'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _HOTP = require('./classes/HOTP');

var _HOTP2 = _interopRequireDefault(_HOTP);

var _TOTP = require('./classes/TOTP');

var _TOTP2 = _interopRequireDefault(_TOTP);

var _Authenticator = require('./classes/Authenticator');

var _Authenticator2 = _interopRequireDefault(_Authenticator);

var _OTPUtils = require('./classes/OTPUtils');

var _OTPUtils2 = _interopRequireDefault(_OTPUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * v3 to v2 adapter
 *
 * This file provides method mappings between
 * version 3 and version 2 of the library.
 *
 * @module v2
 * @since 3.0.0
 */

var hotp = new _HOTP2.default();
var totp = new _TOTP2.default();
var authenticator = new _Authenticator2.default();

function withOptions(otp, method) {
  return function () {
    otp.options = {
      digits: this.digits,
      epoch: this.epoch == null ? null : this.epoch / 1000,
      step: this.step
    };

    return otp[method].apply(otp, arguments);
  };
}

/**
 * Core
 */
function Core() {
  this.digits = 6;
  this.step = 30;
  this.epoch = null;
}

Core.prototype.hotp = withOptions(hotp, 'generate');
Core.prototype.totp = withOptions(totp, 'generate');
Core.prototype.checkTOTP = withOptions(totp, 'check');
Core.prototype.checkHOTP = withOptions(hotp, 'check');
Core.prototype.helpers = {
  isSameToken: _OTPUtils2.default.isSameToken,
  stringToHex: _OTPUtils2.default.stringToHex,
  hexToInt: _OTPUtils2.default.hexToInt,
  intToHex: _OTPUtils2.default.intToHex,
  pad: _OTPUtils2.default.pad
};
Core.prototype.secret = {
  generate: _OTPUtils2.default.generateSecret,
  removeSpaces: _OTPUtils2.default.removeSpaces,
  divideIntoSetsOf: _OTPUtils2.default.setsOf
};

/**
 * Google Authenticator
 */
function Goog() {
  this.digits = 6;
  this.step = 30;
}
Goog.prototype.secret = function () {
  var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;

  var secret = '';
  while (secret.length < len) {
    secret += _OTPUtils2.default.generateSecret(40, 'base64');
  }
  return authenticator.encode(secret).slice(0, len);
};
Goog.prototype.keyuri = function () {
  return encodeURIComponent(authenticator.keyuri.apply(authenticator, arguments));
};
Goog.prototype.qrcode = authenticator.qrcode;
Goog.prototype.generate = authenticator.generate;
Goog.prototype.check = withOptions(totp, 'check');
Goog.prototype.encode = authenticator.encode;
Goog.prototype.decode = authenticator.decode;

/**
 * Default Exports
 */
exports.default = {
  core: new Core(),
  google: new Goog()
};