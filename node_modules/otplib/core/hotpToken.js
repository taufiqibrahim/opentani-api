'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hexToInt = require('../utils/hexToInt');

var _hexToInt2 = _interopRequireDefault(_hexToInt);

var _leftPad = require('../utils/leftPad');

var _leftPad2 = _interopRequireDefault(_leftPad);

var _hotpDigest = require('./hotpDigest');

var _hotpDigest2 = _interopRequireDefault(_hotpDigest);

var _hotpOptions = require('./hotpOptions');

var _hotpOptions2 = _interopRequireDefault(_hotpOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generates the OTP code
 *
 * @module core/hotpToken
 * @param {string} secret - your secret that is used to generate the token
 * @param {number} counter - the OTP counter (usually it's an incremental count)
 * @param {object} options - allowed options as specified in hotpOptions()
 * @return {string} OTP Code
 */
function hotpToken(secret, counter) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (counter == null) {
    return '';
  }

  var opt = (0, _hotpOptions2.default)(options);
  var hmac = (0, _hotpDigest2.default)(secret, counter, opt);

  // offset := last nibble of hash
  var offset = (0, _hexToInt2.default)(hmac.substr(hmac.length - 1));

  // truncatedHash := hash[offset..offset+3]
  // (4 bytes starting at the offset)
  var truncatedHash = hmac.substr(offset * 2, 8);

  // Set the first bit of truncatedHash to zero
  // (i.e. remove the most significant bit)
  var sigbit0 = (0, _hexToInt2.default)(truncatedHash) & (0, _hexToInt2.default)('7fffffff');

  // code := truncatedHash mod 1000000
  var token = sigbit0 % Math.pow(10, opt.digits);

  // left pad code with 0 until length of code is as defined.
  token = (0, _leftPad2.default)(token, opt.digits);

  return token;
}

exports.default = hotpToken;